{"version":3,"sources":["validation.js","PasswordStrengthMeter.js","PasswordToolTip.js","SyncValidationForm.js","LoginPage.js","App.js","serviceWorker.js","store.js","index.js"],"names":["regX","valdnType","valdnValue","test","PasswordStrengthMeter","colorBar","this","props","status","color","bar1","bar2","bar3","bar4","barLength","Object","entries","forEach","entry","react_default","a","createElement","Fragment","className","Component","PasswordToolTip","number","character","length","symbol","renderField","_ref","input","label","type","_ref$meta","meta","touched","error","assign","placeholder","SyncValidationForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShow","setState","hidden","state","handlePasswordChange","event","checkValidation","target","value","password","match","_this2","_this$props","handleSubmit","pristine","reset","submitting","react","onSubmit","Field","name","component","onChange","onClick","PasswordToolTip_PasswordToolTip","src_PasswordStrengthMeter_0","disabled","reduxForm","form","validate","values","errors","getEmailKey","keys","indexOf","email","username","retypepassword","LoginPage","submit","console","log","src_SyncValidationForm","App","src_LoginPage","Boolean","window","location","hostname","rootReducer","combineReducers","formReducer","Store","createStore","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d7fc616.chunk.js","sourcesContent":["/*@Common funcation Form validation */\r\nexport const validate = (values) => {\r\n    const errors = {};\r\n    const getEmailKey = Object.keys(values)[Object.values(values).indexOf(values.email)];//email\r\n    if (!values.username) {\r\n      errors.username = 'Required'\r\n    } else if (values.username.length > 15) {\r\n      errors.username = 'Must be 15 characters or less'\r\n    }\r\n    if (!values.email) {\r\n      errors.email = 'Required'\r\n    } else if (!regX(getEmailKey, values.email)) {\r\n      errors.email = 'Invalid email address'\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Required'\r\n    }\r\n    if (values.password === values.retypepassword) {\r\n      errors.retypepassword = 'password Matched'\r\n    } else {\r\n      errors.retypepassword = 'Password not matched'\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  /*@Common funcation for Regex for form validation*/\r\n  const regX = (valdnType, valdnValue) => {\r\n    if(valdnType === 'email') { \r\n      return /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(valdnValue);\r\n    }\r\n  }\r\n  \r\n  // const pwLength = 8;\r\n  // const config = {\r\n  //     pwPatterns: [\r\n  //       { regExp: new RegExp(\"^(.*[A-Z].*[A-Z].*)$\")},\r\n  //       { regExp: new RegExp(\"^(.*[!@#$&*].*)$\")},\r\n  //       { regExp: new RegExp(\"^(.*[0-9].*[0-9].*)$\")}, \r\n  //       { regExp: new RegExp(\"^(.*[a-z].*[a-z].*[a-z].*)$\")},\r\n  //       { regExp: new RegExp(\"^(.{\" + pwLength + \",})$\")}\r\n  //     ]\r\n  //   }\r\n  //   let pwMatchChart = [\r\n  //               {status: false, condition: 'two uppercase letters'},\r\n  //               {status: false, condition: 'special character'},\r\n  //               {status: false, condition: 'two digits'},\r\n  //               {status: false, condition: 'three lower case letters'},\r\n  //               {status: false, condition: 'the pw length'}\r\n  //   ];\r\n  //   let pwScoreCounter = 0;\r\n  //   config.pwPatterns.forEach((elem,index) => {\r\n  //       switch (elem.regExp.test('password')) {\r\n  //         case true:\r\n  //           pwMatchChart[index].status = true;\r\n  //           break;\r\n  //       }\r\n  //     });\r\n  //   console.log(pwMatchChart);\r\n  //   // check if validator is true and update score\r\n  //     pwMatchChart.forEach(elem => {\r\n  //       if (elem.status) pwScoreCounter++;\r\n  //     });\r\n  //               console.log(pwScoreCounter);","import React, { Component } from 'react';\r\nimport './PasswordStrengthMeter.css';\r\n\r\nclass PasswordStrengthMeter extends Component {\r\n\r\n  render() {\r\n    const { colorBar } = this.props;\r\n    // console.log(\"total entries:-\", colorBar);\r\n    let status = '';\r\n    let color = {\r\n      bar1: \"gray\",\r\n      bar2: \"gray\",\r\n      bar3: \"gray\",\r\n      bar4: \"gray\"\r\n    }\r\n    let barLength = 0;\r\n    Object.entries(colorBar).forEach(entry => {\r\n      if (entry[1] === true) {\r\n        barLength += 1;\r\n      }\r\n    });\r\n    // console.log(\"total validation:-\", barLength);\r\n    switch (barLength) {\r\n      case 0: {\r\n        color = {\r\n          bar1: \"gray\",\r\n          bar2: \"gray\",\r\n          bar3: \"gray\",\r\n          bar4: \"gray\"\r\n        }\r\n\r\n        break;\r\n      }\r\n      case 1: {\r\n        color = {\r\n          bar1: \"red\",\r\n          bar2: \"gray\",\r\n          bar3: \"gray\",\r\n          bar4: \"gray\"\r\n        }\r\n        status = \" veryweak\"\r\n        break;\r\n      }\r\n      case 2: {\r\n        color = {\r\n          bar1: \"orange\",\r\n          bar2: \"orange\",\r\n          bar3: \"gray\",\r\n          bar4: \"gray\"\r\n        }\r\n        status = \" weak\"\r\n        break;\r\n\r\n      }\r\n      case 3: {\r\n        color = {\r\n          bar1: \"yellow\",\r\n          bar2: \"yellow\",\r\n          bar3: \"yellow\",\r\n          bar4: \"gray\"\r\n        }\r\n        status = \"good\"\r\n        break;\r\n      }\r\n      case 4: {\r\n        color = {\r\n          bar1: \"green\",\r\n          bar2: \"green\",\r\n          bar3: \"green\",\r\n          bar4: \"green\"\r\n        }\r\n        status = \"strong\"\r\n        break;\r\n\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"barmenu\">\r\n          <div className={color.bar1} >\r\n            test1\r\n          </div>\r\n          <div className={color.bar2}>\r\n            test2\r\n          </div>\r\n          <div className={color.bar3}>\r\n            test3\r\n          </div>\r\n          <div className={color.bar4}>\r\n            test4\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div>{status}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PasswordStrengthMeter;\r\n","import React, { Component } from 'react';\r\nimport './PasswordToolTip.css';\r\nexport default class PasswordToolTip extends Component {\r\n  render() {\r\n    const { colorBar } = this.props;\r\n    return (\r\n      <div className=\"tooltip\">\r\n        <div className=\"right\">\r\n          <div className=\"text-content\">\r\n            <h3>Password Match</h3>\r\n            <ul>\r\n              <li className={colorBar.number ? \"green\" : \"red\"}><strong>Must conatain numbers 123 </strong> </li>\r\n              <li className={colorBar.character ? \"green\" : \"red\"}><strong>Must conatain upper  and lower AA aa</strong> </li>\r\n              <li className={colorBar.length ? \"green\" : \"red\"}><strong>Must conatain min 8 character </strong> </li>\r\n              <li className={colorBar.symbol ? \"green\" : \"red\"}><strong>Must conatain symbol @ </strong> </li>\r\n            </ul>\r\n          </div>\r\n          <i></i>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport './login.css';\r\nimport { validate } from './validation';\r\nimport PasswordStrengthMeter from './PasswordStrengthMeter';\r\nimport './PasswordStrengthMeter.css';\r\nimport PasswordToolTip from './PasswordToolTip';\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\r\n  <div>\r\n    <label>{label}</label>\r\n    <div>\r\n      <input {...input} placeholder={label} type={type} />\r\n      {touched &&\r\n        ((error && <span>{error}</span>))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nclass SyncValidationForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hidden: true,\r\n      colorBar: {\r\n        length: false,\r\n        character: false,\r\n        symbol: false,\r\n        number: false\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleShow = () => {\r\n    this.setState({ hidden: !this.state.hidden });\r\n  }\r\n\r\n  handlePasswordChange = (event) => {\r\n    // console.log(event.target.value)\r\n    this.checkValidation(event.target.value)\r\n  };\r\n\r\n  checkValidation = (password) => {\r\n    const colorBar = {\r\n      length: false,\r\n      character: false,\r\n      symbol: false,\r\n      number: false\r\n    }\r\n\r\n    if (password.match(/[A-Z]/) && password.match(/[a-z]/)) {\r\n      colorBar.character = true;\r\n    } if (password.match(/[0-9]/)) {\r\n      colorBar.number = true;\r\n    } if (password.match(/[!,?,@,#,$,%,^,&,*,=,(,),_,.]{1}/)) {\r\n      colorBar.symbol = true;\r\n    } if (password.length > 8) {\r\n      colorBar.length = true;\r\n    }\r\n    this.setState({\r\n      colorBar\r\n    })\r\n  }\r\n  render() {\r\n    const { handleSubmit, pristine, reset, submitting } = this.props;\r\n    const { colorBar } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <h2> Sign Up</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\r\n          <Field name=\"email\" type=\"email\" component={renderField} label=\"Email\" />\r\n          <Field name=\"password\" type={this.state.hidden ? \"password\" : \"text\"} component={renderField} label=\"Password\"\r\n            onChange={(event) => this.handlePasswordChange(event)} />\r\n            <button onClick={this.toggleShow}>Show / Hide</button>\r\n          <PasswordToolTip colorBar={colorBar} />\r\n          <PasswordStrengthMeter colorBar={colorBar} />\r\n          <Field name=\"retypepassword\" type=\"password\" component={renderField} label=\"Confirm-Password\" />\r\n          <div>\r\n            <button type=\"submit\" disabled={submitting}>Submit</button>\r\n            <button type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n          </div>\r\n        </form>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\nexport default reduxForm({\r\n  form: 'syncValidation', // a unique identifier for this form\r\n  validate// <--- validation function given to redux-form\r\n})(SyncValidationForm);","import React, { Component } from 'react';\r\nimport SyncValidationForm from './SyncValidationForm';\r\n\r\nclass LoginPage extends Component {\r\n  submit = (values) => {\r\n    // Do something with the form values\r\n    console.log(values);\r\n  }\r\n  render() {\r\n    return (\r\n      <SyncValidationForm onSubmit={this.submit} />\r\n    );\r\n  }\r\n}\r\nexport default LoginPage;","import React from 'react';\r\nimport './App.css';\r\nimport LoginPage from './LoginPage';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <LoginPage />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n});\r\n  \r\nconst Store = createStore(rootReducer);\r\n\r\nexport default Store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}